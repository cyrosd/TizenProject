/*******************************************************************************
 * This file was generated by Tizen Web UI Builder. User should hand edit this
 * file.
 ******************************************************************************/
var Alarms = new Array();
var Favorites = new Array();
var documentsDir;
function onResolveSuccess(dir) {
	documentsDir = dir;
}

function onResolveError(e) {
	console.log('message: ' + e.message);
}

tizen.filesystem.resolve('documents', onResolveSuccess, onResolveError, 'rw');

documentsDir.createFile('alarmFile.dat');
documentsDir.createFile('favoriteFile.dat');

/**
 * @param {Object}
 *            event
 * @base onload
 * @returns {Boolean}
 */
app.onload = function() {
	var Files = [ 'alarmFile.dat', 'favoriteFile.dat' ], variables = [ Alarms,
			Favorites ],i, file;
	for (i = 0; i < 2; i++) {

		function readFromStream(fileStream) {
			try {
				fileStream.position = 0;
				variables[i] = fileStream.read(fileStream.bytesAvailable);
				fileStream.close();
			} catch (exc) {
				console.log('Could not read from file: ' + exc.message);
			}
		}

		try {
			file = documentsDir.resolve(Files[i]);
		} catch (exc) {
			console.log('Could not resolve file: ' + exc.message);

			// Stop in case of any errors
			return;
		}

		try {
			file.openStream(
			// open for reading
			'r',

			// success callback - add textarea's contents
			readFromStream,

			// error callback
			tizen.onError);
		} catch (exc) {
			console.log('Could not write to file: ' + exc.message);
		}
	}
	var temp;
	if (Alarms !== null) {
		for (temp in Alarms) {
			document.getElementById('alarms').innerHTML = "<h4>"
					+ Alarms[temp].name + "</h4><h5>" + Alarms[temp].comment
					+ "</h5><button id='deleteAlarm"+temp+"'>Delete</button><br>";
		}
	}
	if (Favorites !== null) {
		for (temp in Favorites) {
			document.getElementById('favorites').innerHTML = "<h4>"
					+ Favorites[temp].name + "</h4><button id='deleteFavorite"+temp+"'>Delete</button><br>";
			document.getElementById('alarmsFavorite').innerHTML = "<h4>"
				+ Favorites[temp].name + "</h4><button id='use"+temp+"'>Use</button><br>";
		}
	}
	console.log("loaded");
};

/**
 * @param {Object}
 *            event
 * @base onunload
 * @returns {Boolean}
 */
app.onunload = function() {
	// TODO:: Do your app termination job
	console.log("unloaded");
};

/**
 * @param {Object}
 *            event
 * @base onshow
 * @returns {Boolean}
 */
app.onshow = function() {
	var temp;
	if (Alarms !== null) {
		for (temp in Alarms) {
			document.getElementById('deleteAlarm'+temp).onclick=function(){delete Alarms[temp];};
				
			
		}
	}
	if (Favorites !== null) {
		for (temp in Favorites) {
			document.getElementById('deleteFavorite'+temp).onclick=function(){delete Favorites[temp];};
			document.getElementById('alarmsFavorite'+temp).onclick=function(){
				document.getElementById("alarmLat").innerHTML=Favorites[temp].lat;
				document.getElementById("alarmLong").innerHTML=Favorites[temp].long;
				_alarmsFavorite_page.prototype.changePage(document.getElementById("page2"), {transition :"fade", reverse : true});
			};
		}
	}
	console.log("onshown");
};

/**
 * @param {Object}
 *            event
 * @base onhide
 * @returns {Boolean}
 */
app.onhide = function() {
	// TODO:: Do your job on invisible
	var temp, phi1, phi2, delta, R = 6371000, d, notification;
	if (tizen.position.coords.latitude !== 0 && tizen.position.coords.longitude !== 0) {
		for (temp in Alarms) {

		phi1 = Alarms[temp].lat.toRadians();
		phi2 = tizen.position.coords.latitude.toRadians();
		delta = (tizen.position.coords.longitude - Alarms[temp].lat).toRadians();
		d = Math.acos(Math.sin(phi1) * Math.sin(phi2) + Math.cos(phi1)
				* Math.cos(phi2) * Math.cos(delta))
				* R;
		if (d < Alarms[temp].distance) {
			 try {
			var notificationDict = {
					content : Alarms[temp].name,
					iconPath : "images/image1.jpg"
					};
					notification = new tizen.StatusNotification("SIMPLE",
					Alarms[temp].comment, notificationDict);
					tizen.notification.post(notification);
					} catch (err) {
					console.log (err.name + ": " + err.message);
					}
			delete Alarms[temp];
		}
		
	
	}
	}
	console.log("onhidden");
};

/**
 * @param {Object}
 *            event
 * @base onpagebeforechange
 * @returns {Boolean}
 */
app.onpagebeforechange = function() {
	// TODO:: Do your job before switching from the current page
	console.log("onpagebeforechange");
};

/**
 * @param {Object}
 *            event
 * @base onpagebeforeload
 * @returns {Boolean}
 */
app.onpagebeforeload = function() {
	// TODO:: Do your job before an external page is loaded
	console.log("onpagebeforeload");
};

/**
 * @param {Object}
 *            event
 * @base onpagechange
 * @returns {Boolean}
 */
app.onpagechange = function() {
	// TODO:: Do your job after switching from the current page to the new page
	console.log("onpagechange");
};

/**
 * @param {Object}
 *            event
 * @base onpagechangefailed
 * @returns {Boolean}
 */
app.onpagechangefailed = function() {
	// TODO:: Do your job when the page switching fails
	console.log("onpagechangefailed");
};

/**
 * @param {Object}
 *            event
 * @base onpageload
 * @returns {Boolean}
 */
app.onpageload = function() {
	// TODO:: Do your job after an external page is loaded
	console.log("onpageload");
};
/**
 * @param {Object}
 *            event
 * @base _page2_page
 * @returns {Boolean}
 */

_page2_page.prototype.button2_ontap = function(event) {
	var file, locname = document.getElementById('alarmName'), loclat = document
			.getElementById('alarmLat'), loclong = document
			.getElementById('alarmLong'), loccom = document
			.getElementById('alarmComment'), locdis = document
			.getElementById('alarmDistance');
	if ((locname !== "") && (loclat !== "") && (loclong !== "")
			&& (loccom !== "") && (locdis !== "")) {
		document.getElementById('alarmName').innerHTML = "";
		document.getElementById('alarmLat').innerHTML = "";
		document.getElementById('alarmLong').innerHTML = "";
		document.getElementById('alarmComment').innerHTML = "";
		document.getElementById('alarmDistance').innerHTML = "";
		var alarm = {
			name : locname,
			lat : loclat,
			long : loclong,
			comment : loccom,
			distance : locdis
		};
		Alarms.push (alarm);
		function writeToStream(fileStream) {
			try {
				fileStream.write(Alarms);
				fileStream.close();
			} catch (exc) {
				console.log('Could not write to file: ' + exc.message);
			}
		}
		try {
			file = documentsDir.resolve('alarmFile.dat');
		} catch (exc) {
			console.log('Could not resolve file: ' + exc.message);

			// Stop in case of any errors
			return;
		}

		try {
			file.openStream(
			// open for appending
			'a',

			// success callback - add textarea's contents
			writeToStream,

			// error callback
			tizen.onError);
		} catch (exc) {
			console.log('Could not write to file: ' + exc.message);
		}

	} else {
		alert("Invalid entry, please restart");
	}

};
/**
 * @param {Object}
 *            event
 * @base _NewFavorite_page
 * @returns {Boolean}
 */
_NewFavorite_page.prototype.button3_ontap = function(event) {
	var file, locname = document.getElementById('favoriteName'), loclat = document
			.getElementById('favoriteLat'), loclong = document
			.getElementById('favoriteLong');

	if ((locname !== "") && (loclat !== "") && (loclong !== "")) {
		document.getElementById('favoriteName').innerHTML = "";
		document.getElementById('favoriteLat').innerHTML = "";
		document.getElementById('favoriteLong').innerHTML = "";
		var favorite = {
			name : locname,
			lat : loclat,
			long : loclong
		};
		Favorites.push(favorite);

		function writeToStream(fileStream) {
			try {
				fileStream.write(Favorites);
				fileStream.close();
			} catch (exc) {
				console.log('Could not write to file: ' + exc.message);
			}
		}
		try {
			file = documentsDir.resolve('favoriteFile.dat');
		} catch (exc) {
			console.log('Could not resolve file: ' + exc.message);

			// Stop in case of any errors
			return;
		}

		try {
			file.openStream(
			// open for appending
			'a',

			// success callback - add textarea's contents
			writeToStream,

			// error callback
			tizen.onError);
		} catch (exc) {
			console.log('Could not write to file: ' + exc.message);
		}

	} else {
		alert("Invalid entry, please restart");
	}
};
